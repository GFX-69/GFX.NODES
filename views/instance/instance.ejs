<%- include('../components/template') %>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xterm/3.14.5/xterm.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/xterm/3.14.5/xterm.min.css"/>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xterm/3.14.5/addons/attach/attach.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xterm/3.14.5/addons/fit/fit.min.js"></script>

<style>
    /* Modern Dark Theme */
    :root {
        --primary: #6777ef;
        --success: #47c363;
        --danger: #fc544b;
        --warning: #ffa426;
        --bg-color: #0f172a;
        --card-bg: rgba(30, 41, 59, 0.8);
    }

    /* Beautiful Stats Cards */
    .stat-card {
        background: var(--card-bg);
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 15px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .stat-header {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
    }

    .stat-icon {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 8px;
        margin-right: 12px;
    }

    .cpu-icon { background: rgba(58, 186, 244, 0.2); }
    .ram-icon { background: rgba(71, 195, 99, 0.2); }
    .disk-icon { background: rgba(255, 164, 38, 0.2); }

    .stat-icon svg {
        width: 20px;
        height: 20px;
    }

    .cpu-icon svg { color: #3abaf4; }
    .ram-icon svg { color: #47c363; }
    .disk-icon svg { color: #ffa426; }

    .stat-title {
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.7);
    }

    .stat-value {
        font-size: 1.4rem;
        font-weight: 600;
        color: white;
    }

    .progress-container {
        margin-top: 15px;
        height: 6px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 3px;
        overflow: hidden;
    }

    .progress-bar {
        height: 100%;
        border-radius: 3px;
        transition: width 0.5s ease;
    }

    .cpu-progress { background: linear-gradient(90deg, #3abaf4, #6777ef); }
    .ram-progress { background: linear-gradient(90deg, #47c363, #8fd460); }
    .disk-progress { background: linear-gradient(90deg, #ffa426, #ffcf24); }

    /* Console Styles */
    .terminal-container {
        background: #0a0a1a;
        padding: 20px;
        border-radius: 0 0 10px 10px;
        min-height: 400px;
    }

    .console-input-container {
        display: flex;
        gap: 10px;
        padding: 15px;
        background: rgba(15, 23, 42, 0.7);
        border-top: 1px solid rgba(255, 255, 255, 0.1);
    }

    #console-input {
        flex-grow: 1;
        padding: 10px 15px;
        background: rgba(0, 0, 0, 0.3);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 6px;
        color: white;
    }

    #send-command {
        padding: 10px 20px;
        background: var(--primary);
        color: white;
        border: none;
        border-radius: 6px;
        cursor: pointer;
    }

    /* Power Buttons */
    .power-btn {
        padding: 8px 15px;
        border-radius: 6px;
        font-weight: 500;
        display: inline-flex;
        align-items: center;
        margin-right: 8px;
    }

    .power-btn svg {
        margin-right: 6px;
        width: 16px;
        height: 16px;
    }

    .btn-start { background: var(--success); }
    .btn-restart { background: var(--warning); color: #000; }
    .btn-stop { background: var(--danger); }
</style>

<!-- Main Content -->
<main class="container mx-auto px-4 py-6">
    <%- include('../components/instance') %>
    
    <div id="alert-container" class="mb-6"></div>
    
    <!-- Stats Section -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <!-- CPU Card -->
        <div class="stat-card">
            <div class="stat-header">
                <div class="stat-icon cpu-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <rect x="4" y="4" width="16" height="16" rx="2" ry="2"></rect>
                        <rect x="9" y="9" width="6" height="6"></rect>
                        <line x1="9" y1="1" x2="9" y2="4"></line>
                        <line x1="15" y1="1" x2="15" y2="4"></line>
                        <line x1="9" y1="20" x2="9" y2="23"></line>
                        <line x1="15" y1="20" x2="15" y2="23"></line>
                        <line x1="20" y1="9" x2="23" y2="9"></line>
                        <line x1="20" y1="14" x2="23" y2="14"></line>
                        <line x1="1" y1="9" x2="4" y2="9"></line>
                        <line x1="1" y1="14" x2="4" y2="14"></line>
                    </svg>
                </div>
                <div>
                    <div class="stat-title">CPU Usage</div>
                    <div class="stat-value" id="cpuUsage">0%</div>
                </div>
            </div>
            <div class="progress-container">
                <div class="progress-bar cpu-progress" id="cpuProgressBar" style="width: 0%"></div>
            </div>
        </div>
        
        <!-- RAM Card -->
        <div class="stat-card">
            <div class="stat-header">
                <div class="stat-icon ram-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <rect x="4" y="4" width="16" height="16" rx="2" ry="2"></rect>
                        <rect x="9" y="9" width="6" height="6"></rect>
                    </svg>
                </div>
                <div>
                    <div class="stat-title">Memory Usage</div>
                    <div class="stat-value" id="ramUsage">0 MB / 0 MB</div>
                </div>
            </div>
            <div class="progress-container">
                <div class="progress-bar ram-progress" id="ramProgressBar" style="width: 0%"></div>
            </div>
        </div>
        
        <!-- Disk Card -->
        <div class="stat-card">
            <div class="stat-header">
                <div class="stat-icon disk-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <circle cx="12" cy="12" r="10"></circle>
                        <circle cx="12" cy="12" r="4"></circle>
                        <line x1="4.93" y1="4.93" x2="9.17" y2="9.17"></line>
                        <line x1="14.83" y1="14.83" x2="19.07" y2="19.07"></line>
                    </svg>
                </div>
                <div>
                    <div class="stat-title">Disk Usage</div>
                    <div class="stat-value" id="diskUsage">0 MB / 0 MB</div>
                </div>
            </div>
            <div class="progress-container">
                <div class="progress-bar disk-progress" id="diskProgressBar" style="width: 0%"></div>
            </div>
        </div>
    </div>
    
    <!-- Console Section -->
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Server Console</h3>
            <div>
                <button id="startButton" class="power-btn btn-start">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <polygon points="5 3 19 12 5 21 5 3"></polygon>
                    </svg>
                    Start
                </button>
                <button id="restartButton" class="power-btn btn-restart">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M21.5 2v6h-6M21.34 15.57a10 10 0 1 1-.57-8.38"/>
                    </svg>
                    Restart
                </button>
                <button id="stopButton" class="power-btn btn-stop">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <rect x="6" y="4" width="12" height="16" rx="2"></rect>
                    </svg>
                    Stop
                </button>
            </div>
        </div>
        <div class="card-body p-0">
            <div id="terminal" class="terminal-container"></div>
            <div class="console-input-container">
                <input type="text" id="console-input" placeholder="Enter command...">
                <button id="send-command">Send</button>
            </div>
        </div>
    </div>
</main>

<script>
    // Initialize terminal
    const term = new Terminal({
        cursorBlink: true,
        fontFamily: "'Fira Code', monospace",
        fontSize: 14,
        theme: {
            background: '#0a0a1a',
            foreground: '#ffffff'
        }
    });
    
    // Load fit addon for proper terminal sizing
    const fitAddon = new FitAddon();
    term.loadAddon(fitAddon);
    term.open(document.getElementById('terminal'));
    fitAddon.fit();
    
    // Handle window resize
    window.addEventListener('resize', () => {
        fitAddon.fit();
    });
    
    // WebSocket connection for console
    const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';
    const socket = new WebSocket(`${protocol}://${window.location.host}/console/<%= instance.id %>`);
    
    socket.onmessage = function(event) {
        term.write(event.data);
    };
    
    socket.onclose = function() {
        term.write('\r\n\nConnection closed. Attempting to reconnect...');
        setTimeout(() => window.location.reload(), 2000);
    };
    
    // Handle command sending
    document.getElementById('send-command').addEventListener('click', sendCommand);
    document.getElementById('console-input').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') sendCommand();
    });
    
    function sendCommand() {
        const command = document.getElementById('console-input').value;
        if (command.trim()) {
            socket.send(command);
            document.getElementById('console-input').value = '';
        }
    }
    
    // Stats updates
    function updateStats() {
        fetch(`/api/instance/<%= instance.id %>/stats`)
            .then(response => response.json())
            .then(data => {
                // Update CPU
                document.getElementById('cpuUsage').textContent = `${data.cpu}%`;
                document.getElementById('cpuProgressBar').style.width = `${data.cpu}%`;
                
                // Update RAM
                const ramUsage = formatBytes(data.memory.usage);
                const ramTotal = formatBytes(data.memory.limit);
                document.getElementById('ramUsage').textContent = `${ramUsage} / ${ramTotal}`;
                document.getElementById('ramProgressBar').style.width = `${data.memory.percent}%`;
                
                // Update Disk
                const diskUsage = formatBytes(data.disk.usage);
                const diskTotal = formatBytes(data.disk.limit);
                document.getElementById('diskUsage').textContent = `${diskUsage} / ${diskTotal}`;
                document.getElementById('diskProgressBar').style.width = `${data.disk.percent}%`;
            })
            .catch(error => console.error('Error fetching stats:', error));
    }
    
    function formatBytes(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    
    // Update stats every 2 seconds
    setInterval(updateStats, 2000);
    updateStats(); // Initial call
    
    // Power actions
    document.getElementById('startButton').addEventListener('click', () => {
        fetch(`/api/instance/<%= instance.id %>/start`, { method: 'POST' })
            .then(response => {
                if (!response.ok) throw new Error('Start failed');
                showAlert('success', 'Server started successfully');
            })
            .catch(error => {
                showAlert('danger', 'Failed to start server');
                console.error('Start error:', error);
            });
    });
    
    document.getElementById('restartButton').addEventListener('click', () => {
        fetch(`/api/instance/<%= instance.id %>/restart`, { method: 'POST' })
            .then(response => {
                if (!response.ok) throw new Error('Restart failed');
                showAlert('warning', 'Server restarting...');
            })
            .catch(error => {
                showAlert('danger', 'Failed to restart server');
                console.error('Restart error:', error);
            });
    });
    
    document.getElementById('stopButton').addEventListener('click', () => {
        fetch(`/api/instance/<%= instance.id %>/stop`, { method: 'POST' })
            .then(response => {
                if (!response.ok) throw new Error('Stop failed');
                showAlert('info', 'Server stopped successfully');
            })
            .catch(error => {
                showAlert('danger', 'Failed to stop server');
                console.error('Stop error:', error);
            });
    });
    
    // Alert function
    function showAlert(type, message) {
        const alert = document.createElement('div');
        alert.className = `alert alert-${type}`;
        alert.textContent = message;
        document.getElementById('alert-container').appendChild(alert);
        setTimeout(() => alert.remove(), 5000);
    }
</script>

<%- include('../components/footer') %>
