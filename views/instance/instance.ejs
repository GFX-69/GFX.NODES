<%- include('../components/template') %>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xterm/3.14.5/xterm.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/xterm/3.14.5/xterm.min.css"/>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xterm/3.14.5/addons/attach/attach.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xterm/3.14.5/addons/fit/fit.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"/>
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">

<style>
    :root {
        --primary: #7367f0;
        --primary-light: #9c8cfc;
        --primary-dark: #5d50e6;
        --secondary: #a8a8a8;
        --success: #28c76f;
        --danger: #ea5455;
        --warning: #ff9f43;
        --info: #00cfe8;
        --dark: #283046;
        --darker: #161d31;
        --light: #f8f8f8;
        --card-bg: #283046;
        --card-border: #3b4253;
        --text-primary: #d0d2d6;
        --text-secondary: #b4b7bd;
        --sidebar-bg: #161d31;
        --gradient-primary: linear-gradient(118deg, #7367f0, rgba(115, 103, 240, 0.7));
    }
    
    body {
        background-color: var(--darker);
        color: var(--text-primary);
        font-family: 'Poppins', -apple-system, BlinkMacSystemFont, sans-serif;
        line-height: 1.6;
    }
    
    /* Premium Card Design */
    .card {
        background-color: var(--card-bg);
        border: 1px solid var(--card-border);
        border-radius: 0.6rem;
        box-shadow: 0 4px 24px 0 rgba(34, 41, 47, 0.1);
        margin-bottom: 1.5rem;
        overflow: hidden;
        transition: all 0.3s ease;
        position: relative;
    }
    
    .card:before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 4px;
        height: 100%;
        background: var(--gradient-primary);
    }
    
    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px 0 rgba(34, 41, 47, 0.25);
    }
    
    .card-header {
        padding: 1.2rem 1.5rem;
        border-bottom: 1px solid var(--card-border);
        display: flex;
        align-items: center;
        justify-content: space-between;
    }
    
    .card-title {
        font-weight: 600;
        font-size: 1.15rem;
        margin: 0;
        color: var(--text-primary);
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }
    
    .card-body {
        padding: 1.5rem;
    }
    
    /* Premium Buttons */
    .btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        font-weight: 500;
        padding: 0.7rem 1.5rem;
        border-radius: 0.5rem;
        font-size: 0.9rem;
        line-height: 1;
        transition: all 0.3s ease;
        cursor: pointer;
        border: none;
        gap: 0.5rem;
        position: relative;
        overflow: hidden;
        z-index: 1;
    }
    
    .btn:after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.1);
        z-index: -2;
    }
    
    .btn:before {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        width: 0%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.2);
        transition: all 0.3s ease;
        z-index: -1;
    }
    
    .btn:hover:before {
        width: 100%;
    }
    
    .btn-sm {
        padding: 0.5rem 1rem;
        font-size: 0.8rem;
    }
    
    .btn-primary {
        background-color: var(--primary);
        color: white;
    }
    
    .btn-primary:hover {
        background-color: var(--primary-dark);
    }
    
    .btn-success {
        background-color: var(--success);
        color: white;
    }
    
    .btn-danger {
        background-color: var(--danger);
        color: white;
    }
    
    .btn-warning {
        background-color: var(--warning);
        color: white;
    }
    
    .btn-info {
        background-color: var(--info);
        color: white;
    }
    
    .btn-outline {
        background-color: transparent;
        border: 1px solid var(--secondary);
        color: var(--text-primary);
    }
    
    .btn-outline:hover {
        background-color: rgba(255, 255, 255, 0.05);
    }
    
    /* Uptime Display Styles */
    .uptime-display {
        font-family: 'Fira Code', monospace;
        background: rgba(0, 0, 0, 0.2);
        padding: 0.5rem 1rem;
        border-radius: 0.5rem;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.9rem;
    }
    
    .uptime-badge {
        display: inline-flex;
        align-items: center;
        padding: 0.4rem 0.8rem;
        font-size: 0.75rem;
        font-weight: 600;
        border-radius: 50px;
        gap: 0.5rem;
        background-color: rgba(0, 207, 232, 0.12);
        color: var(--info);
    }
    
    .uptime-badge::before {
        content: '';
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background-color: currentColor;
    }
    
    .uptime-badge.online {
        background-color: rgba(40, 199, 111, 0.12);
        color: var(--success);
    }
    
    /* Terminal Styling */
    .terminal-container {
        background-color: #1a2335;
        border-radius: 0.5rem;
        border: 1px solid var(--card-border);
        height: 400px;
        position: relative;
        overflow: hidden;
    }
    
    /* Stats Cards */
    .stat-card {
        background-color: var(--card-bg);
        border-radius: 0.5rem;
        padding: 1.2rem;
        border: 1px solid var(--card-border);
        margin-bottom: 1rem;
        transition: all 0.3s ease;
    }
    
    .stat-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 4px 15px 0 rgba(34, 41, 47, 0.15);
    }
    
    .stat-title {
        font-size: 0.75rem;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        color: var(--text-secondary);
        margin-bottom: 0.75rem;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }
    
    .stat-value {
        font-size: 1.5rem;
        font-weight: 600;
        color: var(--text-primary);
        margin-bottom: 0.5rem;
    }
    
    .progress {
        height: 6px;
        background-color: rgba(255, 255, 255, 0.1);
        border-radius: 3px;
        margin-top: 1rem;
        overflow: hidden;
    }
    
    .progress-bar {
        height: 100%;
        border-radius: 3px;
        background: var(--gradient-primary);
        position: relative;
        overflow: hidden;
    }
    
    /* Status Badges */
    .status-badge {
        display: inline-flex;
        align-items: center;
        padding: 0.4rem 0.8rem;
        font-size: 0.75rem;
        font-weight: 600;
        border-radius: 50px;
        gap: 0.5rem;
    }
    
    .status-badge::before {
        content: '';
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background-color: currentColor;
    }
    
    .status-online {
        background-color: rgba(40, 199, 111, 0.12);
        color: var(--success);
    }
    
    .status-offline {
        background-color: rgba(234, 84, 85, 0.12);
        color: var(--danger);
    }
    
    .status-starting {
        background-color: rgba(255, 159, 67, 0.12);
        color: var(--warning);
    }
    
    /* Power Controls */
    .power-controls {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 1rem;
        margin-bottom: 1.5rem;
    }
    
    .power-btn {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 1.2rem 0.5rem;
        border-radius: 0.5rem;
        background-color: rgba(40, 48, 70, 0.5);
        border: 1px solid var(--card-border);
        transition: all 0.3s ease;
        cursor: pointer;
        text-align: center;
    }
    
    .power-btn:hover {
        background-color: rgba(115, 103, 240, 0.1);
        transform: translateY(-3px);
        box-shadow: 0 4px 12px rgba(115, 103, 240, 0.1);
    }
    
    .power-btn svg {
        width: 1.8rem;
        height: 1.8rem;
        margin-bottom: 0.75rem;
        color: var(--primary);
    }
    
    .power-btn span {
        font-size: 0.8rem;
        color: var(--text-primary);
    }
    
    /* Server Details */
    .server-details {
        margin-bottom: 1.5rem;
    }
    
    .server-details-title {
        font-size: 0.8rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        color: var(--text-secondary);
        margin-bottom: 1.2rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .server-detail {
        display: flex;
        align-items: center;
        margin-bottom: 1rem;
        font-size: 0.9rem;
    }
    
    .server-detail-icon {
        margin-right: 1rem;
        color: var(--primary);
        font-size: 1.1rem;
        width: 20px;
        text-align: center;
    }
    
    /* Layout */
    .grid-layout {
        display: grid;
        grid-template-columns: 1fr;
        gap: 1.5rem;
    }
    
    @media (min-width: 768px) {
        .grid-layout {
            grid-template-columns: minmax(0, 2fr) minmax(0, 1fr);
        }
    }
    
    /* Console Input */
    .console-input-container {
        display: flex;
        gap: 0.75rem;
        margin-top: 1rem;
        position: relative;
    }
    
    .console-input {
        flex: 1;
        background-color: rgba(40, 48, 70, 0.5);
        border: 1px solid var(--card-border);
        border-radius: 0.5rem;
        padding: 0.9rem 1.2rem;
        color: var(--text-primary);
        font-family: 'Fira Code', monospace;
        font-size: 0.9rem;
        transition: all 0.3s ease;
    }
    
    .console-input:focus {
        outline: none;
        border-color: var(--primary);
        box-shadow: 0 0 0 3px rgba(115, 103, 240, 0.3);
    }
    
    /* Animations */
    @keyframes pulse {
        0% { opacity: 0.6; }
        50% { opacity: 1; }
        100% { opacity: 0.6; }
    }
    
    /* Utility Classes */
    .text-muted {
        color: var(--text-secondary) !important;
    }
    
    .text-primary {
        color: var(--primary) !important;
    }
    
    .flex-center {
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .gap-2 {
        gap: 0.5rem;
    }
    
    .mt-4 {
        margin-top: 1rem;
    }
    
    .mb-4 {
        margin-bottom: 1rem;
    }
    
    /* Custom Scrollbar */
    ::-webkit-scrollbar {
        width: 8px;
        height: 8px;
    }
    
    ::-webkit-scrollbar-track {
        background: rgba(0, 0, 0, 0.1);
    }
    
    ::-webkit-scrollbar-thumb {
        background: var(--primary);
        border-radius: 4px;
    }
</style>

<script>
    // Uptime Tracking Variables
    let serverStartTime = null;
    let uptimeInterval = null;
    let currentUptime = 0;
    let totalUptime = 0;
    let dailyUptime = 0;
    let weeklyUptime = 0;
    let uptimeChart = null;
    
    // Format time (HH:MM:SS)
    function formatTime(seconds) {
        const hrs = Math.floor(seconds / 3600);
        const mins = Math.floor((seconds % 3600) / 60);
        const secs = seconds % 60;
        return `${String(hrs).padStart(2, '0')}:${String(mins).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
    };
    
    // Update all uptime displays
    function updateUptimeDisplay() {
        // Update all displays
        document.getElementById('uptime-value').textContent = formatTime(currentUptime);
        document.getElementById('current-uptime').textContent = formatTime(currentUptime);
        document.getElementById('daily-uptime').textContent = formatTime(dailyUptime);
        document.getElementById('weekly-uptime').textContent = formatTime(weeklyUptime);
        document.getElementById('total-uptime').textContent = formatTime(totalUptime);
        
        // Update badge in header
        const uptimeBadge = document.getElementById('uptime-badge');
        uptimeBadge.innerHTML = `<i class="fas fa-clock"></i> <span>${formatTime(currentUptime)}</span>`;
        
        // Change badge color based on uptime
        if (currentUptime > 86400) { // More than 24 hours
            uptimeBadge.className = 'uptime-badge online';
        } else {
            uptimeBadge.className = 'uptime-badge';
        }
    }
    
    // Start uptime tracking
    function startUptimeTracking() {
        if (uptimeInterval) clearInterval(uptimeInterval);
        
        serverStartTime = new Date();
        updateUptimeDisplay();
        
        uptimeInterval = setInterval(() => {
            currentUptime++;
            totalUptime++;
            dailyUptime++;
            weeklyUptime++;
            updateUptimeDisplay();
            saveUptimeData();
        }, 1000);
    }
    
    // Stop uptime tracking
    function stopUptimeTracking() {
        if (uptimeInterval) {
            clearInterval(uptimeInterval);
            uptimeInterval = null;
        }
        serverStartTime = null;
        currentUptime = 0;
        updateUptimeDisplay();
    }
    
    // Save uptime data to localStorage
    function saveUptimeData() {
        localStorage.setItem(`server_uptime_${instanceId}`, JSON.stringify({
            total: totalUptime,
            daily: dailyUptime,
            weekly: weeklyUptime,
            lastUpdated: new Date().toISOString()
        }));
    }
    
    // Load uptime data from localStorage
    function loadUptimeData() {
        const savedUptime = localStorage.getItem(`server_uptime_${instanceId}`);
        if (savedUptime) {
            const uptimeData = JSON.parse(savedUptime);
            totalUptime = uptimeData.total || 0;
            dailyUptime = uptimeData.daily || 0;
            weeklyUptime = uptimeData.weekly || 0;
        }
    }
    
    // Initialize uptime chart
    function initUptimeChart() {
        const ctx = document.getElementById('uptime-chart').getContext('2d');
        uptimeChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                datasets: [{
                    label: 'Uptime (hours)',
                    data: [8, 12, 6, 9, 10, 5, 7],
                    backgroundColor: 'rgba(115, 103, 240, 0.2)',
                    borderColor: 'rgba(115, 103, 240, 1)',
                    borderWidth: 2,
                    tension: 0.4,
                    fill: true,
                    pointBackgroundColor: 'rgba(115, 103, 240, 1)',
                    pointBorderColor: '#fff',
                    pointHoverRadius: 5,
                    pointHoverBackgroundColor: 'rgba(115, 103, 240, 1)',
                    pointHoverBorderColor: '#fff',
                    pointHitRadius: 10,
                    pointBorderWidth: 2
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        backgroundColor: 'rgba(40, 48, 70, 0.9)',
                        titleColor: '#d0d2d6',
                        bodyColor: '#b4b7bd',
                        borderColor: '#3b4253',
                        borderWidth: 1,
                        displayColors: false,
                        callbacks: {
                            label: function(context) {
                                return ` ${context.parsed.y} hours`;
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: {
                            color: 'rgba(59, 66, 83, 0.5)'
                        },
                        ticks: {
                            color: '#b4b7bd',
                            callback: function(value) {
                                return value + 'h';
                            }
                        }
                    },
                    x: {
                        grid: {
                            color: 'rgba(59, 66, 83, 0.5)'
                        },
                        ticks: {
                            color: '#b4b7bd'
                        }
                    }
                }
            }
        });
    }
    
    // Check server status
    function checkServerStatus() {
        axios.get(`/instance/${instanceId}/status`)
            .then(response => {
                if (response.data.running) {
                    startUptimeTracking();
                    document.getElementById('status').className = 'status-badge status-online';
                    document.getElementById('status').textContent = 'ONLINE';
                } else {
                    stopUptimeTracking();
                    document.getElementById('status').className = 'status-badge status-offline';
                    document.getElementById('status').textContent = 'OFFLINE';
                }
            })
            .catch(error => {
                console.error('Error checking server status:', error);
            });
    }
    
    // Initialize everything when DOM is loaded
    document.addEventListener('DOMContentLoaded', function() {
        loadUptimeData();
        initUptimeChart();
        checkServerStatus();
        
        // Your existing WebSocket code...
        // Add uptime tracking to your WebSocket status updates
        // For example:
        /*
        ws.onmessage = function(event) {
            const data = JSON.parse(event.data);
            if (data.event === 'status') {
                if (data.status === 'started') {
                    startUptimeTracking();
                } else if (data.status === 'stopped') {
                    stopUptimeTracking();
                }
            }
            // Rest of your message handling...
        };
        */
    });
</script>

<main class="container mx-auto px-4 py-8">
    <%- include('../components/instance') %>
    
    <% if (Array.isArray(files) && files.length > 0 && !files.some(file => file.name === 'eula.txt')) { %>
        <% if (instance.imageData.features && instance.imageData.features.includes('eula')) { %>
            <script>
                document.addEventListener('DOMContentLoaded', () => {
                    showEulaPopup();
                });
            </script>
        <% } %>
    <% } %>
    
    <% if (instance.Image == "ghcr.io/hydrenoffical/hydravm:latest") { %>
        <div id="alert-container" class="mb-6">
            <div class="alert alert-info">
                <div class="flex items-start gap-3">
                    <div class="alert-icon flex-shrink-0">
                        <i class="fas fa-server"></i>
                    </div>
                    <div>
                        <h4 class="font-semibold text-sm">Ubuntu 22.04 VM</h4>
                        <p class="text-sm text-muted mt-1">You're running an Ubuntu 22.04 VM. Default credentials: <code class="bg-black/20 px-1.5 py-0.5 rounded font-mono">root:root</code></p>
                    </div>
                </div>
            </div>
        </div>
    <% } else { %>
        <div id="alert-container" class="mb-6"></div>
    <% } %>
    
    <div class="grid-layout gap-6">
        <!-- Main Content Column -->
        <div class="space-y-6">
            <!-- Console Card -->
            <div class="card">
                <div class="card-header">
                    <div class="flex items-center gap-4">
                        <h3 class="card-title">
                            <i class="fas fa-terminal"></i>
                            Server Console
                        </h3>
                        <div id="uptime-display" class="uptime-display">
                            <i class="fas fa-clock"></i>
                            <span id="uptime-value">00:00:00</span>
                        </div>
                    </div>
                    <div class="flex gap-2">
                        <button onclick="clearTerminal()" class="btn btn-sm btn-outline">
                            <i class="fas fa-trash-alt"></i>
                            Clear
                        </button>
                        <button onclick="toggleFullscreen()" class="btn btn-sm btn-outline">
                            <i class="fas fa-expand"></i>
                            Fullscreen
                        </button>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div id="terminal" class="terminal-container"></div>
                    
                    <div class="console-input-container p-4 border-t border-slate-700">
                        <input type="text" 
                               id="console-input" 
                               class="console-input" 
                               placeholder="Enter command..." 
                               required>
                        <button onclick="sendCommand()" class="btn btn-primary">
                            <span>Send</span>
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Sidebar Column -->
        <div class="space-y-6">
            <!-- Server Control Card -->
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">
                        <i class="fas fa-server"></i>
                        <%= instance.Name %>
                    </h3>
                    <div class="flex items-center gap-2">
                        <span id="status" class="status-badge status-offline">OFFLINE</span>
                        <span id="uptime-badge" class="uptime-badge">
                            <i class="fas fa-clock"></i>
                            <span>00:00:00</span>
                        </span>
                    </div>
                </div>
                <div class="card-body">
                    <!-- Power Controls -->
                    <div class="power-controls">
                        <button id="startButton" class="power-btn" title="Start Server">
                            <i class="fas fa-play"></i>
                            <span>Start</span>
                        </button>
                        
                        <button id="restartButton" class="power-btn" title="Restart Server">
                            <i class="fas fa-redo"></i>
                            <span>Restart</span>
                        </button>
                        
                        <button id="stopButton" class="power-btn" title="Stop Server">
                            <i class="fas fa-stop"></i>
                            <span>Stop</span>
                        </button>
                        
                        <button onclick="window.location.href='/instance/<%= req.params.id %>/plugins'" class="power-btn" title="Server Plugins">
                            <i class="fas fa-puzzle-piece"></i>
                            <span>Plugins</span>
                        </button>
                    </div>
                    
                    <!-- Server Info -->
                    <div class="server-details">
                        <h4 class="server-details-title">
                            <i class="fas fa-info-circle"></i>
                            Server Details
                        </h4>
                        <div class="space-y-3">
                            <div class="server-detail">
                                <div class="server-detail-icon">
                                    <i class="fas fa-microchip"></i>
                                </div>
                                <div>
                                    <div class="text-sm text-muted">Node</div>
                                    <span id="node"><%= instance.Node.name %></span>
                                </div>
                            </div>
                            
                            <div class="server-detail">
                                <div class="server-detail-icon">
                                    <i class="fas fa-network-wired"></i>
                                </div>
                                <div>
                                    <div class="text-sm text-muted">Connection</div>
                                    <span id="ip"><%= instance.Node.address %>:<%= instance.Primary %></span>
                                </div>
                            </div>
                            
                            <div class="server-detail">
                                <div class="server-detail-icon">
                                    <i class="fas fa-memory"></i>
                                </div>
                                <div>
                                    <div class="text-sm text-muted">Resources</div>
                                    <span><%= instance.Cpu %> CPU / <%= instance.Memory %> MB RAM / <%= instance.Disk %> GB Disk</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Stats Container -->
                    <div class="stats-container">
                        <div id="cpuUsageContainer" class="stat-card">
                            <div class="stat-title">
                                <span>CPU Usage</span>
                                <i class="fas fa-microchip"></i>
                            </div>
                            <div class="stat-value" id="cpuUsage">0%</div>
                            <div class="progress">
                                <div id="cpuProgressBar" class="progress-bar" style="width: 0%"></div>
                            </div>
                        </div>
                    
                        <div id="ramUsageContainer" class="stat-card">
                            <div class="stat-title">
                                <span>Memory Usage</span>
                                <i class="fas fa-memory"></i>
                            </div>
                            <div class="stat-value" id="ramUsage">0 MB</div>
                            <div class="progress">
                                <div id="ramProgressBar" class="progress-bar" style="width: 0%"></div>
                            </div>
                        </div>
                    
                        <div id="diskUsageContainer" class="stat-card">
                            <div class="stat-title">
                                <span>Disk Usage</span>
                                <i class="fas fa-hdd"></i>
                            </div>
                            <div class="stat-value" id="diskUsage">0 MB</div>
                            <div class="progress">
                                <div id="diskProgressBar" class="progress-bar" style="width: 0%"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Uptime Statistics Card -->
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">
                        <i class="fas fa-chart-line"></i>
                        Uptime Statistics
                    </h3>
                </div>
                <div class="card-body">
                    <div class="grid grid-cols-2 gap-4">
                        <div class="stat-card">
                            <div class="stat-title">
                                <span>Current Session</span>
                                <i class="fas fa-clock"></i>
                            </div>
                            <div class="stat-value" id="current-uptime">00:00:00</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-title">
                                <span>Today</span>
                                <i class="fas fa-calendar-day"></i>
                            </div>
                            <div class="stat-value" id="daily-uptime">00:00:00</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-title">
                                <span>This Week</span>
                                <i class="fas fa-calendar-week"></i>
                            </div>
                            <div class="stat-value" id="weekly-uptime">00:00:00</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-title">
                                <span>All Time</span>
                                <i class="fas fa-calendar-alt"></i>
                            </div>
                            <div class="stat-value" id="total-uptime">00:00:00</div>
                        </div>
                    </div>
                    <div class="mt-4" style="height: 150px;">
                        <canvas id="uptime-chart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>

<!-- Your existing JavaScript for terminal and other functionality -->
<script>
    // Add this to your existing WebSocket message handler
    /*
    ws.onmessage = function(event) {
        const data = JSON.parse(event.data);
        if (data.event === 'status') {
            if (data.status === 'started') {
                startUptimeTracking();
                document.getElementById('status').className = 'status-badge status-online';
                document.getElementById('status').textContent = 'ONLINE';
            } else if (data.status === 'stopped') {
                stopUptimeTracking();
                document.getElementById('status').className = 'status-badge status-offline';
                document.getElementById('status').textContent = 'OFFLINE';
            }
        }
        // Rest of your message handling...
    };
    */
    
    // Add fullscreen functionality
    function toggleFullscreen() {
        const terminalContainer = document.getElementById('terminal');
        if (!document.fullscreenElement) {
            terminalContainer.requestFullscreen().catch(err => {
                showAlert('danger', 'Fullscreen Error', `Error attempting to enable fullscreen: ${err.message}`);
            });
        } else {
            document.exitFullscreen();
        }
    }
</script>

<%- include('../components/footer') %>
